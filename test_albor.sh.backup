#!/bin/bash
# test_albor.sh - RRC Connection Test (Docker-aware)
# Tests Albor gNodeB against srsUE without core network dependency.
# Focus: Cell detection and RRC establishment.

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# --- Configuration ---
CONTAINER_NAME="albor-gnb-dev"
LOG_DIR_NAME="$(date +%Y%m%d_%H%M%S)_rrc_test"
LOG_DIR_HOST="./logs/$LOG_DIR_NAME"
LOG_DIR_CONTAINER="/workspace/logs/$LOG_DIR_NAME"

# --- Script Start ---

mkdir -p "$LOG_DIR_HOST"
log_info "=== Albor gNB RRC Connection Test (Docker-aware) ==="
log_info "Log directory: $LOG_DIR_HOST"

# Check if container is running
if ! docker ps | grep -q $CONTAINER_NAME; then
    log_error "Docker container '$CONTAINER_NAME' is not running. Please start it first."
    exit 1
fi
log_info "✓ Docker container '$CONTAINER_NAME' is running."

# Cleanup function
cleanup() {
    log_info "Cleaning up gNB and UE processes inside container..."
    docker exec $CONTAINER_NAME bash -c "pkill -9 -f albor_gnodeb 2>/dev/null || true"
    docker exec $CONTAINER_NAME bash -c "pkill -9 -f srsue 2>/dev/null || true"
    sleep 1
}

# Set trap for cleanup on exit
trap cleanup EXIT

# Initial cleanup
log_info "Initial cleanup of old processes..."
cleanup

# Step 1: Build Albor gNodeB inside container
log_info "Step 1: Building Albor gNodeB (debug mode)..."
docker exec $CONTAINER_NAME bash -c "cd /workspace && cargo build --jobs 1" > "$LOG_DIR_HOST/build.log" 2>&1
if [ ${PIPESTATUS[0]} -ne 0 ]; then
    log_error "Build failed. See logs for details."
    tail -30 "$LOG_DIR_HOST/build.log"
    exit 1
fi
log_info "✓ Build successful."

# Step 2: Start Albor gNodeB with detailed logging inside container
log_info "Step 2: Starting Albor gNodeB..."
docker exec $CONTAINER_NAME bash -c "cd /workspace && RUST_LOG=trace ./target/debug/albor_gnodeb -c /workspace/config/albor_gnb/gnb_albor.yml" > "$LOG_DIR_HOST/gnb.log" 2>&1 &

sleep 2 # Give gNB a moment to initialize

# Step 3: Start srsUE inside container
log_info "Step 3: Starting srsUE..."
docker exec $CONTAINER_NAME bash -c "cd /opt/srsran && export LD_LIBRARY_PATH=/opt/srsran/lib:\$LD_LIBRARY_PATH && /opt/srsran/bin/srsue /workspace/config/srsue/ue_nr_zmq_10mhz.conf --log.phy_level=debug --rat.nr.dl_nr_arfcn 368500 --rat.nr.ssb_nr_arfcn 368410 --rat.nr.nof_prb 52 --rat.nr.scs 15 --rat.nr.ssb_scs 15" > "$LOG_DIR_HOST/ue.log" 2>&1 &

# Step 4: Monitor for RRC Connection
log_info "Step 4: Monitoring for RRC connection (10 second timeout)..."

TIMEOUT=10
SUCCESS=false

for i in $(seq 1 $TIMEOUT); do
    printf "\r[%02d/%02d] Checking RRC status..." "$i" "$TIMEOUT"
    
    if grep -q "RRC Connected" "$LOG_DIR_HOST/ue.log" 2>/dev/null; then
        SUCCESS=true
        break
    fi
    
    sleep 1
done

echo ""
echo "=========================================="
log_info "TEST RESULTS:"
echo "=========================================="

if [ "$SUCCESS" = "true" ]; then
    log_info "✅ SUCCESS: RRC connection established!"
    echo ""
    log_info "Key milestones from UE log:"
    grep -E "(Found Cell|Random Access Complete|RRC Connected)" "$LOG_DIR_HOST/ue.log"
else
    log_error "❌ FAILED: RRC connection not established within $TIMEOUT seconds."
    echo ""
    log_info "Milestones check:"
    if grep -q "Found Cell" "$LOG_DIR_HOST/ue.log"; then
        log_info "  - Cell Found: YES"
    else
        log_info "  - Cell Found: NO"
    fi
    if grep -q "Random Access Complete" "$LOG_DIR_HOST/ue.log"; then
        log_info "  - Random Access: YES"
    else
        log_info "  - Random Access: NO"
    fi
    echo ""
    log_info "Albor gNodeB log tail (last 50 lines):"
    tail -50 "$LOG_DIR_HOST/gnb.log"
    echo ""
    log_info "UE log tail (last 50 lines):"
    tail -50 "$LOG_DIR_HOST/ue.log"
fi

echo "=========================================="

# Final cleanup is handled by the trap
exit 0